name: Tests
on:
  pull_request:
  push:
    branches:
      - main
concurrency:
  group: ci-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Run tests
        run: |
          sudo go run github.com/onsi/ginkgo/v2/ginkgo -v -r -p --covermode=atomic --coverprofile=coverage.out --timeout=2h --skipPackage ./e2e ./...
      - name: Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./coverage.out
  build-image:
    runs-on: kvm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Quay Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: |
            quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }}
          labels: |
            quay.expires-after=6h
      - name: Push
        run: |
          docker push quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }}
  e2e-tests:
    runs-on: kvm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Build local image
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: auroraboot:test
      - name: Run e2e tests
        run: |
          go run github.com/onsi/ginkgo/v2/ginkgo -v -r -p --covermode=atomic --coverprofile=coverage.out --timeout=2h --label-filter "e2e" ./e2e
      - name: Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./coverage.out
  test-bootable-iso-uki:
    runs-on: kvm
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y ovmf libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev swtpm
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Generate ISO
        run: |
          mkdir build
          docker run --rm --privileged \
          -v $PWD/build/:/output \
          -v $PWD/e2e/assets/keys/:/keys \
          quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }} \
          --debug \
          build-uki \
          --output-dir /output \
          --public-keys /keys \
          --tpm-pcr-private-key /keys/tpm2-pcr-private.pem \
          --sb-key /keys/db.key \
          --sb-cert /keys/db.pem \
          --output-type iso \
          -x "console=ttyS0" \
          quay.io/kairos/ubuntu:24.04-core-amd64-generic-v3.2.3
      - name: Test UKI iso is bootable
        env:
          FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
          KVM: true
          EFIVARS_EMPTY: true
        run: |
          export ISO=$(find $PWD/build -name *.iso)
          go run github.com/onsi/ginkgo/v2/ginkgo run --label-filter "bootable" -v --fail-fast -r ./e2e
  test-bootable-raw-efi:
    runs-on: kvm
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y ovmf libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Generate raw image
        run: |
          mkdir build
          docker run --rm --privileged \
          -v $PWD/build/:/output \
          quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }} \
          --debug \
          --set "disable_http_server=true" --set "disable_netboot=true" --set "state_dir=/output" \
          --set "disk.efi=true" \
          --set "disk.size=16000" \
          --set "container_image=quay.io/kairos/ubuntu:24.04-core-amd64-generic-v3.2.3"
      - name: Test raw image is bootable
        env:
          KVM: true
          FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
        run: |
          export RAW_IMAGE=$(find $PWD/build -name *.raw)
          go run github.com/onsi/ginkgo/v2/ginkgo run --label-filter "raw-bootable" -v --fail-fast -r ./e2e
  test-bootable-raw-bios:
    runs-on: kvm
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y ovmf libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Generate raw image
        run: |
          mkdir build
          docker run --rm --privileged \
          -v $PWD/build/:/output \
          quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }} \
          --debug \
          --set "disable_http_server=true" --set "disable_netboot=true" --set "state_dir=/output" \
          --set "disk.bios=true" \
          --set "disk.size=16000" \
          --set "container_image=quay.io/kairos/ubuntu:24.04-core-amd64-generic-v3.2.3"
      - name: Test raw image is bootable
        env:
          KVM: true
        run: |
          export RAW_IMAGE=$(find $PWD/build -name *.raw)
          go run github.com/onsi/ginkgo/v2/ginkgo run --label-filter "raw-bootable" -v --fail-fast -r ./e2e
  test-ui-builder:
    runs-on: ubuntu-latest
    needs: build-image
    steps:
     - name: Checkout code
       uses: actions/checkout@v4
       with:
         fetch-depth: 1
     - name: Set up Docker Buildx
       id: buildx
       uses: docker/setup-buildx-action@master
     - name: Preload the Aurora image
       run: docker pull quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }}
     - name: Cypress run
       uses: cypress-io/github-action@v6
       with:
         working-directory: e2e/web/
         start: docker run --rm -p 8080:8080 quay.io/kairos/ci-temp-images:auroraboot-${{ github.sha }} web --create-worker > /dev/null 2>&1
     - name: Upload Cypress screenshots
       if: always()
       continue-on-error: true
       uses: actions/upload-artifact@v4
       with:
         name: cypress-screenshots
         path: e2e/web/cypress/screenshots/
